import {getRestProps, mapChildren} from '../utils';
import {ButtonGroup, Button} from '../button';
import {Select, Option} from '../select';
import {Input} from '../input';
import {Icon} from '../icon';
import {_$} from '../../i18n';
import {makeStyles} from './styles';

const {
    total, size, noBorder, simple, 
    className, showTotal, showGoto,
    counts, current, limit, limits,
    showLimits
} = this.get();

if (!total) return <!-- pagination -->

const classNameObj = {
    'k-pagination': true,
    [className]: className,
    [`k-${size}`]: size !== 'default',
    ['k-no-border']: noBorder,
    ['k-simple']: simple,
    [makeStyles()]: true,
};

let type = 'default';
if (noBorder || simple) {
    type = 'none';
}

const totalPages = (Math.ceil(total / limit)) || 0;

const paginationButton = function(page) {
    return (
        <Button type={type}
            size={size}
            icon
            value={page}
        >{page}</Button>
    );
};

const paginationDot = function(callback) {
    return <Button type={type}
        size={size}
        icon
        class="k-pagination-ellipsis"
        ev-click={callback}
    >...</Button>
};

let paginationItems = [];
let minCount = Math.ceil(counts / 2);
let maxCount = totalPages - minCount;
let prevPage = current - 1;
let nextPage = current + 1;

 if (!simple) {
    if (totalPages > counts) {
        if (current <= minCount) {
            const max = counts - 2;
            for (let i = 1; i <= max; i++) {
                paginationItems.push(paginationButton(i));
            }
            paginationItems.push(paginationDot(this.fastNext));
            paginationItems.push(paginationButton(totalPages));
        } else if (current > minCount && current <= maxCount) {
            paginationItems.push(paginationButton(1));
            paginationItems.push(paginationDot(this.fastPrev));

            const midCount = counts - 4;
            const mid = Math.floor(midCount / 2);
            const min = current - mid;
            const max = midCount % 2 === 1 ? current + mid : current + mid - 1;
            for (let i = min; i <= max; i++) {
                paginationItems.push(paginationButton(i));
            }

            paginationItems.push(paginationDot(this.fastNext));
            paginationItems.push(paginationButton(totalPages));
        } else {
            paginationItems.push(paginationButton(1));
            paginationItems.push(paginationDot(this.fastPrev));

            const min = totalPages - counts + 3;
            for (let i = min; i <= totalPages; i++) {
                paginationItems.push(paginationButton(i));
            }
        }
    } else {
        for (let i = 1; i <= totalPages; i++) {
            paginationItems.push(paginationButton(i));
        }
    }
} else {
    paginationItems = [
        <Input size={size === 'mini' || size === 'small' ? 'mini' : 'small'}
            autoWidth
            value={current}
            ev-change={this.goto}
        />,
        <span class="k-pagination-text"> / {totalPages}</span>,
    ];
}

<div class={classNameObj} {...getRestProps(this)}>
    <ButtonGroup checkType="radio" v-model="current">
        <Button icon size={size}
            type={type}
            disabled={current <= 1}
            ev-click={this.prev}
        ><Icon class="ion-ios-arrow-left" /></Button>
        <template>{paginationItems}</template>
        <Button icon size={size}
            type={type}
            disabled={current >= totalPages}
            ev-click={this.next}
        ><Icon class="ion-ios-arrow-right" /></Button>
    </ButtonGroup>

    <template v-if={!simple}>
        <div class="k-pagination-limits" v-if={showLimits}>
            <Select v-model="limit" allowUnmatch size={size}>
                <Option v-for={limits} value={$value}>
                    {_$('{n} 条 / 页', {n: $value})}
                </Option>
            </Select>
        </div>

        <div class="k-pagination-goto" v-if={showGoto}>
            <span class="c-middle">{_$('跳至')}</span>
            <Input size={size} value={current} ev-change={this.goto}/>
            <span class="c-middle">{_$('页')}</span>
        </div>

        <div v-if={showTotal} class="k-pagination-total">
            {_$('共 {n} 条', {n: total})}
        </div>
    </template>
</div>
