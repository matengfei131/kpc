import {Icon} from '../icon';
import {addStyle, isTextBlock, getRestProps} from '../utils';
import {makeStyles} from './styles';
import {noop, isNullOrUndefined} from 'intact-shared';

const {
    className, style, type, value, defaultValue, placeholder,
    clearable, disabled, size, rows, autoWidth, fluid,
    width, stackClearIcon, frozenOnInput, readonly,

    'ev-click': click,
    'ev-mounseenter': mouseenter,
    'ev-mouseleave': mouseleave,

    ...rest
} = this.get();

const {
    inputing: {value: inputing},
    originalValue: {value: originalValue},
    startInput, onInput, endInput
} = this.frozen;

const classNameObj = {
    'k-input': true,
    [`k-${size}`]: size !== 'default',
    'k-group': $blocks.prepend || $blocks.append,
    'k-disabled': disabled,
    'k-with-prefix': $blocks.prefix,
    'k-with-suffix': $blocks.suffix,
    'k-clearable': clearable,
    'k-auto-width': autoWidth,
    'k-fluid': fluid,
    'k-stack-clear': stackClearIcon,
    [className]: className,
    [makeStyles()]: true,
}

const {fakeRef, width: {value: fakeWidth}} = this.autoWidth;

const inputValue = frozenOnInput && inputing ? originalValue : value;
const hasInputValue = !isNullOrUndefined(inputValue);
const hasValue = hasInputValue && inputValue !== '';
const inputProps = {
    ...getRestProps(this, rest),
    'ev-focus': startInput,
    'ev-blur': endInput,
    'ev-input': onInput,
    defaultValue,
    readOnly: readonly,
    placeholder,
    disabled,
    ref: this.inputRef,
    style: autoWidth ? {width: fakeWidth + 'px'} : undefined,
};
// if we pass value to input element, the input is controlled and the
// defaultValue does not work
if (hasInputValue) {
    inputProps.value = inputValue;
}

<div class={classNameObj}
    style={width != null ? addStyle(style, {width: `${width}px`}) : style} 
    ev-click={click}
    ev-mouseenter={mouseenter}
    ev-mouseleave={mouseleave}
>
    {do {
        if ($blocks.prepend) {
            // if the children of this block is text node
            // we add a padding to the wrapper node
            // so we handle this block manually
            const children = $blocks.prepend(noop);
            <div class={{
                "k-input-prepend": true, 
                "k-input-padding": isTextBlock(children)
           }}>{children}</div>
        }
    }}
    <div class="k-input-wrapper">
        <div class="k-input-prefix" v-if={$blocks.prefix}>
            <b:prefix />
        </div>
        <input v-if={type !== 'textarea'}
            {...inputProps}
            class="k-input-inner" 
            type={type}
        />
        <textarea v-else 
            {...inputProps}
            class="k-input-inner k-textarea"
            rows={rows}
        ></textarea>
        <div class="k-input-suffix" v-if={$blocks.suffix || clearable && !disabled}>
            <Icon v-if={clearable && !disabled}
                class={{
                    "k-input-clear ion-ios-close": true, 
                    "k-input-show": hasValue,
                }}
                ev-click={this.clear}
            />{' '}
            <b:suffix />
        </div>
        <div v-if={autoWidth}
            class="k-input-fake"
            ref={fakeRef}
        >{!hasValue ? placeholder : inputValue}</div>
    </div>
    {do {
        if ($blocks.append) {
            const children = $blocks.append(noop);
            <div class={{
                "k-input-append": true, 
                "k-input-padding": isTextBlock(children)
           }}>{children}</div>
        }
    }}
</div>
