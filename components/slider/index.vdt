import {Spinner} from '../spinner';
import {Tooltip} from '../tooltip';
import {getRestProps} from '../utils';
import makeStyles from './styles';

const {
    value, min, max, className,
    disabled, isRange, animate,
    isShowInput, isShowEnd, unit,
    step, _isDragging, _isFirst,
    _isSecond, _sliderValue, always,
    isShowStop, marks, showTooltip,
    tooltipProps, _inputValue
} = this.get();

const classNameObj = {
    'k-slider': true,
    'k-disabled': disabled,
    [className]: className,
    'k-dragging': _isDragging || !animate,
    'k-show-input': isShowInput && !isRange,
    'k-show-end': isShowEnd,
    [makeStyles()]: true,
};

const sliderWidth = max - min;
const toPercent = (value) => value / sliderWidth * 100 + '%';
let barStyle;
let handleStartStyle;
let handleEndStyle;
if (sliderWidth) {
    if (isRange) {
        barStyle = {
            width: toPercent(Math.abs(_sliderValue[1] - _sliderValue[0])),
            left: toPercent(Math.min(_sliderValue[0], _sliderValue[1]) - min),
        };
        handleStartStyle = {
            left: toPercent(_sliderValue[0] - min),
        };
        handleEndStyle = {
            left: toPercent(_sliderValue[1] - min),
        };
    } else {
        barStyle = {
            width: toPercent(_sliderValue - min),
        };
        handleStartStyle = {
            left: toPercent(_sliderValue - min),
        };
    }
} else {
    barStyle = {width: '100%', left: '0'};
    handleStartStyle = {left: '100%'};
    handleEndStyle = {left: '0'};
}

const tooltip = (value) => {
    return <tooltip args={[value]}>{value}</tooltip>;
};
const _tooltipProps = {
    container: dom => dom.parentElement,
    canHover: true,
    always,
    ...tooltipProps,
};
if (always) {
    _tooltipProps.value = true;
}

<div class={classNameObj} {...getRestProps(this)}>
    <div class="k-slider-wrapper">
        <div class="k-bar-wrapper"
            ev-click={this._clickWrapper} 
        >
            <div class="k-wrapper" 
                ref={dom => this.$slider = dom}
            >
                <div class="k-bar" style={barStyle}></div>
                <div class="k-handle-wrapper" style={handleStartStyle}>
                    <Tooltip ref="tooltip1"
                        disabled={!showTooltip}
                        {..._tooltipProps}
                    >
                        <div
                            class={{
                                "k-handle": true, 
                                "k-active": (_isFirst && _sliderValue[1] === this._max) || 
                                    (_isSecond && value[0] !== this._min)
                            }}
                            ref={dom => this.$sliderFirstBtn = dom}
                            ev-mousedown={isRange ? 
                                this.onDrag.bind(this, '_isFirst') : 
                                this.onDrag.bind(this, undefined)
                            }
                            ev-click={this._stopPropagation}
                            tabindex={disabled ? "-1" : "0"}
                            ev-keydown={isRange ? 
                                this._onKeydown.bind(this, '_isFirst') :
                                this._onKeydown.bind(this, undefined)
                            }
                            ev-keyup={this._onKeyUp}
                            ev-focusin={this._onFocusin.bind(this, '_isFirst')}
                            ev-focusout={this._onFocusout.bind(this, '_isFirst')}
                        ></div>
                        <b:content>{tooltip(isRange ? value[0] : value)}</b:content>
                    </Tooltip>
                </div>
                <div class="k-handle-wrapper" v-if={isRange}
                    style={handleEndStyle}
                >
                    <Tooltip ref="tooltip2" 
                        disabled={!showTooltip}
                        {..._tooltipProps}
                    >
                        <div
                            class={{
                                "k-handle": true,
                                "k-active": (_isSecond && _sliderValue[0] === this._min) || 
                                    (_isFirst && _sliderValue[1] !== this._max)
                            }}
                            ref={dom => this.$sliderSecondBtn = dom}
                            ev-mousedown={this.onDrag.bind(this, "_isSecond")}
                            tabindex={disabled ? "-1" : "0"}
                            ev-keydown={this._onKeydown.bind(this, '_isSecond')}
                            ev-focusin={this._onFocusin.bind(this, '_isSecond')}
                            ev-focusout={this._onFocusout.bind(this, '_isSecond')}
                            ev-click={this._stopPropagation}
                        ></div>
                        <b:content>{tooltip(value[1])}</b:content>
                    </Tooltip>
                </div>
                <div class="k-handle-wrapper" v-if={isRange}
                    style={handleEndStyle}
                >
                </div>
            </div>
        </div>
        <div class="k-box" v-if={isShowEnd && !marks}>
            <span ev-click={this._setOneValue.bind(this, min)}>{min + unit} </span>
            <span ev-click={this._setOneValue.bind(this, max)}>{max + unit}</span>
        </div>
    </div>
    <div class="k-spinner-wrapper"
        v-if={isShowInput && !isRange}
    >
        <Spinner
            disabled={disabled} 
            max={max} 
            min={min}
            value={_inputValue}
            step={step || 0.01} 
            vertical
            ev-change={this._onChange}
        />
    </div>
</div>
