import {getRestProps, mapChildren} from '../utils';
import {CarouselItem} from './item';
import {Button} from '../button';
import {Icon} from '../icon';
import {makeStyles} from './styles';
import {linkEvent} from 'intact';

const {className, children, arrow, effect} = this.get();
const {translate, shouldTransition, elementRef, isSlide} = this.slide;

const classNameObj = {
    'k-carousel': true,
    [className]: className,
    [`k-${arrow}`]: true,
    'k-stop': !shouldTransition.value,
    [`k-${effect}`]: true,
    [makeStyles()]: true,
};

const {getItems, getItemsWithCloned} = this.items;
const {stop, play} = this.autoplay;

<div class={classNameObj} 
    {...getRestProps(this)}
    ref={elementRef}
    ev-mouseenter={stop}
    ev-mouseleave={play}
>
    <div class="k-carousel-wrapper"
        style={{
            transform: isSlide() ? `translate3d(${translate.value}px, 0, 0)` : undefined,
        }} 
    >
        {getItemsWithCloned()}
    </div>
    <Button icon circle type="none" size="large" class="k-carousel-btn k-prev"
        ev-click={this.prev}
    >
        <Icon class="ion-ios-arrow-left" />
    </Button>
    <Button icon circle type="none" size="large" class="k-carousel-btn k-next"
        ev-click={this.next}
    >
        <Icon class="ion-ios-arrow-right" />
    </Button>
    <div class="k-carousel-indicator c-clearfix">
        <div v-for={getItems()}
            class={{'k-carousel-dot': true, 'k-active': this.isActive($value.props.value)}}
            ev-click={linkEvent($key, this.setIndex)}
        ></div>
    </div>
</div>
