import {directClone, Transition} from 'intact';
import {Dropdown, DropdownItem} from '../dropdown';
import {Tooltip} from '../tooltip';
import {Icon} from '../icon';
import {Menu} from './menu';
import {getRestProps, expandAnimationCallbacks} from '../utils';
import {isNullOrUndefined} from 'intact-shared';
import {makeItemStyles, makeTitleStyles} from './styles';

const rootMenu = this.rootMenu;
const {theme, type, dot: rootDot} = rootMenu.get();
const {children, key, className, disabled, dot} = this.get();
const {isHighlighted, isSelected} = this.highlight;
const {isExpanded: isExpandedKey} = this.expanded;
const isExpanded = isExpandedKey(key);
const {
    isTopItem, subMenuVNode, isDropdownMenu,
    tooltipContents, iconVNode, titleVNodes,
    position, isCollapse,
} = this.dropdown();
const classNameObj = {
    'k-menu-item': true,
    [className]: className,
    'k-expanded': isExpanded, 
    'k-disabled': disabled,
    'k-active':  isSelected(), 
    'k-highlighted': isHighlighted(),
    [makeItemStyles()]: true,
};

const showDot = isTopItem && !iconVNode && isNullOrUndefined(dot) ? rootDot : dot;
const title = (children) => (
    <div class={{'k-menu-title': true, [makeTitleStyles()]: true}}
        ev-click={this.onClick.bind(this, subMenuVNode)}
    >
        <Icon class="k-menu-dot ion-record" v-if={showDot} />
        <div class="k-menu-name">{children}</div>
        <i class="k-menu-arrow ion-ios-arrow-down" v-if={subMenuVNode}></i>
    </div>
);

<div class={classNameObj} {...getRestProps(this)}>
    <template v-if={!isDropdownMenu}>
        {title(titleVNodes)}
        <Transition
            show={isExpanded}
            key="subMenu"
            {...expandAnimationCallbacks}
        >
            {subMenuVNode}
        </Transition>
    </template>

    <template v-else-if={!subMenuVNode}>
        <Tooltip 
            v-if={isTopItem && isCollapse}
            position={rootMenu.get('type') !== 'horizontal' ? 'right' : 'bottom'}
            theme={rootMenu.get('theme') === 'dark' ? 'dark' : 'light'}
        >
            {title(iconVNode)}
            <b:content>{tooltipContents}</b:content> 
        </Tooltip>
        <template v-else>{title(titleVNodes)}</template>
    </template>

    <template v-else>
        <Dropdown position={position}>
            <template>{title(isTopItem && isCollapse ? iconVNode : titleVNodes)}</template>
            <template>{subMenuVNode}</template>
        </Dropdown>
        <Transition
            {/* use a Transition to keep the shrink and expand animation */}
            show={isExpanded}
            key="subMenu"
            {...expandAnimationCallbacks}
        ></Transition>
    </template>
</div>
